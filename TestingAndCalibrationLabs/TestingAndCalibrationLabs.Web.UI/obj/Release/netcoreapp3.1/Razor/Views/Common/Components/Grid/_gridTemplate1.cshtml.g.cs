#pragma checksum "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c2b5de2478c270760883a1682edcbe3c984b6b92"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Common_Components_Grid__gridTemplate1), @"mvc.1.0.view", @"/Views/Common/Components/Grid/_gridTemplate1.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using TestingAndCalibrationLabs.Web.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using TestingAndCalibrationLabs.Web.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using TestingAndCalibrationLabs.Business.Common;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c2b5de2478c270760883a1682edcbe3c984b6b92", @"/Views/Common/Components/Grid/_gridTemplate1.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"87ea9b8a111f12a73c09d93ec0c20de57828e725", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Common_Components_Grid__gridTemplate1 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<TestingAndCalibrationLabs.Web.UI.Models.RecordsDTO>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c2b5de2478c270760883a1682edcbe3c984b6b924198", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
#nullable restore
#line 2 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.ModuleId);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<div class=""border width-full"" style=""margin:0;padding:0;border-bottom:2px solid !important;"">
    <div class=""row mb-1"">
        <div class=""col-xs-4 col-sm-4 col-md-4 col-lg-6 mt-2"">
            <h2 class=""mb-2 ms-1 me-1"" style=""padding:0px 12px;"">");
#nullable restore
#line 7 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                                                            Write(Model.Fields.First().UiPageTypeName);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h2>
        </div>
        <div class=""col-xs-4 col-sm-4 col-md-4 col-lg-3 mt-2"">
            <a data-toggle=""modal"" data-target=""#saveModal"" onclick=""UpdateFieldsWithValue('Create',0)""><i class=""fa fa-plus icon-plus""></i></a>
        </div>
        <div class=""col-xs-4 col-sm-4 col-md-4 col-lg-3 mt-3"">
            <div class=""inputSearchGrid text-right"">
                <input type=""text"" id=""MultiValueGridSearch"" onkeyup=""function()"" class=""light-table-filter inputWithIconSearch "" data-table=""table-info"" placeholder=""Search"">
                <i class=""fa fa-solid fa-magnifying-glass iconForSearchLeft""></i>
                <i class=""fa fa-solid fa-xmark iconForSearchRight"" onclick=""clearText()""></i>
            </div>
        </div>
    </div>
    <div class=""table-responsive simple-pagination card shadow border-radius-grid"">
        <table id=""multiValueGrid"" class=""table table-striped dt-responsive nowrap cell-border"" width=""100%"" cellspacing=""0"">
            <thead>
                <tr>");
            WriteLiteral("\n");
#nullable restore
#line 24 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                     foreach (var item in Model.Fields)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <th> ");
#nullable restore
#line 26 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                        Write(Html.DisplayFor(fieldItem => item.UiControlDisplayName));

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n");
#nullable restore
#line 27 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n");
#nullable restore
#line 32 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                 foreach (var item in Model.FieldValues)
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <tr>\r\n");
#nullable restore
#line 35 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                         foreach (var itemValue in item.Value)
                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <td>\r\n                                ");
#nullable restore
#line 38 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                           Write(Html.DisplayFor(modelItem => itemValue.Value));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                            </td>\r\n");
#nullable restore
#line 40 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td>\r\n                            <a class=\"fas fa-edit\" style=\"margin:5px;color:rebeccapurple;\" data-bs-toggle=\"modal\" data-bs-target=\"#saveModal\"");
            BeginWriteAttribute("onclick", " onclick=\"", 2259, "\"", 2310, 3);
            WriteAttributeValue("", 2269, "UpdateFieldsWithValue(\'Update\',", 2269, 31, true);
#nullable restore
#line 42 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
WriteAttributeValue("", 2300, item.Key, 2300, 9, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 2309, ")", 2309, 1, true);
            EndWriteAttribute();
            WriteLiteral("></a> |\r\n                            <a class=\"fa fa-trash\" style=\"margin:5px;color:red;\" data-bs-toggle=\"modal\" data-bs-target=\"#deleteModalPopup\"");
            BeginWriteAttribute("onclick", " onclick=\"", 2458, "\"", 2501, 3);
            WriteAttributeValue("", 2468, "setValue(\'deletePopup\',", 2468, 23, true);
#nullable restore
#line 43 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
WriteAttributeValue("", 2491, item.Key, 2491, 9, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 2500, ")", 2500, 1, true);
            EndWriteAttribute();
            WriteLiteral("></a>\r\n                        </td>\r\n                    </tr>\r\n");
#nullable restore
#line 46 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral("            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n<script>\r\n    let recordId = parseInt($(\"#Id\").val());\r\n    let model = JSON.parse(\'");
#nullable restore
#line 54 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
                       Write(Json.Serialize(Model));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');
    let metadata = model.fields;
    let multiPageData = model.fieldValues;
    oTable = $('#multiValueGrid').DataTable({
        lengthMenu: [
            [5, 10, 25, 50, -1],
            [5, 10, 25, 50, 'All'],
        ],
        scrollX: true,
    });
    $('#MultiValueGridSearch').keyup(function () {
        oTable.search($(this).val()).draw();
    })
    const clearText = () => {
        const inputID = document.querySelector(""#MultiValueGridSearch"");
        inputID.value = """";
    }


    //Call the DeleteMultiValue Method Of Common Page
    let deleteFun = (id) => {
        WheelLoader();
        let fieldValues = [];
        let keyValuepair = {};
        keyValuepair.RecordId = recordId;
        keyValuepair.SubRecordId = id;
        fieldValues.push(keyValuepair)
        $.ajax({
            type: 'POST',
            url: """);
#nullable restore
#line 83 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Common\Components\Grid\_gridTemplate1.cshtml"
             Write(Url.Action("DeleteMultiValue","Common"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: { ""Id"": recordId, fieldValues, updatedDate },
            success: function (response) {
                myFunction();
                window.location.href = ""/common/edit/"" + recordId;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {

            }
        });
    }
    //In This Function I am Creating Controls For Save Popup
    $(document).ready(function () {
        for (let i = 0; i < metadata.length; i++) {
            let metadataId = metadata[i].id;
            let controlTypeName = metadata[i].uiControlTypeName;
            let star;
            if (metadata[i].isRequired){
                star = ""<span class='red-color'>*</span>"";
            }else{
                star = """";
            }
            let controlId = `${controlTypeName}${metadataId}`;
            let uiControlDisplayName = metadata[i].uiControlDisplayName;
            let inse");
            WriteLiteral(@"rtElement = `<div class=""col-lg-12  col-sm-12 col-xs-12 mt-3 form-element-for-common-control  right-pd-frm-input"">
                                                                                                        <input class=""form-input width-full black-border"" type=""text"" id=""${controlId}"" name=""${controlId}"" placeholder="" "" onchange=""this.setAttribute('value',this.value)"" />
                                                                                                    <label class=""form-label"" for=""${controlId}"">${uiControlDisplayName}${star}</label></div>`;
            $(""#gridPopup"").append(insertElement);
        }
    });
    //Inserting Record
    let saveRecords = (subRId) => {
        WheelLoader();
        let workflowStageId = parseInt($(""#WorkflowStageId"").val())
        const getMembers = (member) => {

            if (!member.children || !member.children.length) {
                return member.value;
            }
            return [member.value, _.flatMapDeep(member.");
            WriteLiteral(@"children, getMembers)];
        }
        var layout = _.flatMapDeep(mainModel.layout, getMembers);
        var fieldValues = [];
        for (let i = 0; i < layout.length; i++) {
            if (layout[i].uiPageMetadata.controlCategoryName == ""DataControl"" && layout[i].uiPageMetadata.multiValueControl != true) {
                var fieldId = ""#"" + layout[i].uiPageMetadata.uiControlTypeName + layout[i].uiPageMetadata.id;
                if ($(fieldId).hasClass(""red-error-border"")) {
                    $(fieldId).removeClass(""red-error-border"").addClass(""black-border"");
                }
                var metadataId = layout[i].uiPageMetadata.id;
                var fieldValue = $(fieldId).val();
                var keyValuepair = {};
                var uiPageData = layout[i].uiPageData;
                if (layout[i].uiPageData != null) {
                    var pageDataId = layout[i].uiPageData.id;
                    var oldValue = layout[i].uiPageData.value;
                    if (oldV");
            WriteLiteral(@"alue != fieldValue) {
                        keyValuepair.Id = pageDataId;
                        keyValuepair.uiPageMetadataId = metadataId;
                        keyValuepair.RecordId = id;
                        keyValuepair.Value = fieldValue;
                        keyValuepair.UiPageTypeId = uiPageTypeId;
                        fieldValues.push(keyValuepair)
                    }
                }
                else {
                    keyValuepair.Id = 0;
                    keyValuepair.UiPageMetadataId = metadataId;
                    keyValuepair.RecordId = id;
                    keyValuepair.Value = fieldValue;
                    keyValuepair.UiPageTypeId = uiPageTypeId;
                    fieldValues.push(keyValuepair)
                }
            }
        }
        for (let y = 0; y < metadata.length; y++) {
            var value;
            var keyValuepair = {};
            let mId = metadata[y].id;
            let controlType = metadata[y].uiControlType");
            WriteLiteral(@"Name;
            let val = $(`#${controlType}${mId}`).val();
            if (subRId == 0) {
                keyValuepair.Id = 0;
                keyValuepair.UiPageMetadataId = mId;
                keyValuepair.RecordId = id;
                keyValuepair.Value = val;
                keyValuepair.UiPageTypeId = uiPageTypeId;
                keyValuepair.MultiValueControl = true;
                fieldValues.push(keyValuepair)
            }
            else {
                for (let i = 0; i < multiPageData[subRId].length; i++) {
                    if (metadata[y].id == multiPageData[subRId][i].uiPageMetadataId) {
                        value = multiPageData[subRId][i];
                        keyValuepair.Id = value.id;
                        keyValuepair.uiPageMetadataId = mId;
                        keyValuepair.RecordId = id;
                        keyValuepair.Value = val;
                        keyValuepair.UiPageTypeId = uiPageTypeId;
                        keyValuepair.MultiV");
            WriteLiteral(@"alueControl = true;
                        keyValuepair.SubRecordId = value.subRecordId;
                        fieldValues.push(keyValuepair)
                    }
                }

            }
        }
        $.ajax({
            type: 'POST',
            url: url,
            data: { id, workflowStageId, updatedDate, moduleId, uiPageTypeId, fieldValues },
            success: function (response) {
                myFunction();
                window.location.href = ""/common/edit/"" + id;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                HideWheelLoader();
                let newresponseJSON = response.responseJSON;                    //assiging the values of responseJson to  newresponseJSON
                let newErrorMessage = newresponseJSON.errorMessage;            //assiging the values of errorMessage to  newErrorMessage
                let ele = """";");
            WriteLiteral(@"
                for (let i = 0; i < newErrorMessage.length; i++) {
                    let msg = newErrorMessage[i].reason;
                    let sourceId = ""#"" + newErrorMessage[i].sourceId;
                    $(sourceId).removeClass(""black-border"").addClass(""red-error-border"");
                    if (newErrorMessage[i].messageKey == ""True"") {
                        ele += `<div class=""alert""><span onclick=""this.parentElement.style.display='none';"" class=""closebtn"">&times;</span>${msg}</div>`;
                       
                    }
                    else {
                        myFunctionError();                                              //Calling myFunctionError javacript function
                        if (i == 0) {
                            document.getElementById(""errormessage"").innerHTML = newErrorMessage[i].reason;
                        }
                    }
                    ErrorMessage(NotificationNumbers++, msg); 
                }
                $(""#a");
            WriteLiteral(@"lert-box"").html(ele);
            }
        });
    }
    //Set Value To Element eId Is Element Id and sId Is Value Id
    let setValue = (eId, sId) => $(`#${eId}`).val(sId);
    //Set Modal Header
    let SetHeader = (headerName, rId) => {
        $(""#multiGridHeader"").text(headerName);
        $(""#savebtn"").val(rId);
    }
    //Set PreValues To Update Dailog
    let UpdateFieldsWithValue = (headerName, id) => {
        SetHeader(headerName, id);
        for (let x = 0; x < metadata.length; x++) {
            var value;
            let metadataId = metadata[x].id;
            let controlType = metadata[x].uiControlTypeName;
            if (id == 0) {
                $(`#${controlType}${metadataId}`).val("""");

            } else {
                for (let i = 0; i < multiPageData[id].length; i++) {
                    if (metadata[x].id == multiPageData[id][i].uiPageMetadataId) {
                        value = multiPageData[id][i].value;
                        $(`#${controlType}${m");
            WriteLiteral("etadataId}`).val(value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<TestingAndCalibrationLabs.Web.UI.Models.RecordsDTO> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
