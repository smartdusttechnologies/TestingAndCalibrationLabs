#pragma checksum "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Shared\_pageNavigation.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d00a95ae4b96112dd0a5855ec28fec943dd65cc7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__pageNavigation), @"mvc.1.0.view", @"/Views/Shared/_pageNavigation.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using TestingAndCalibrationLabs.Web.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using TestingAndCalibrationLabs.Web.UI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\_ViewImports.cshtml"
using TestingAndCalibrationLabs.Business.Common;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d00a95ae4b96112dd0a5855ec28fec943dd65cc7", @"/Views/Shared/_pageNavigation.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"87ea9b8a111f12a73c09d93ec0c20de57828e725", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Shared__pageNavigation : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<ul class=""navbar-nav ms-auto"" id=""navbarContentAdd"">
    <li class=""nav-item "" style=""display:none"" id=""nav-item-Settings"">
        <a class=""nav-link dropdown-toggle "" href=""#"" id=""navbarDropdown"" role=""button"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""false"">
            <i class=""fa fa-gear""></i>
        </a>
        <div class=""dropdown-menu dropdown-menu-right"" id=""dropdownContentSettings"" aria-labelledby=""navbarDropdown"">
            <a class=""dropdown-item"" style=""display:none"" id=""nav-item-FullPage"" onclick=""toggleFullScreen(++Page)"">
                FullPage
            </a>
        </div>
    </li>
    <li class=""nav-item dropdown notification-ui show"" style=""display:none;padding-right:10px"" id=""nav-item-Notifications"">
        <a class="" notification-ui_icon"" id=""navbarDropdown"" role=""button"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""false"">
            <i class=""fa fa-bell"" onclick=""DisplayNotification()"" style=""font-size:15px; color:grey;"" id=""rotat");
            WriteLiteral(@"e""> </i> <span class=""fa-bell__badge"" id=""value"">0</span>
        </a>

        <div class=""notification-overlay notification-ui_dd show"" id=""Menu"" style=""display:none"" aria-labelledby=""navbarDropdown"">
            <div class=""notification-ui_dd-header"">
                <h3 class=""text-center"">Notification</h3>
                <a style=""color:royalblue; width:auto;cursor:pointer"" onclick=""Delete()"">Clear</a>
            </div>
            <div class=""notification-ui_dd-content"" id=""dropdownContentNotifications"">

                <div class=""notification-list_detail"" id=""Paragraph"">
                    <p id=""Name"" style=""color:grey""><center><b>No Notification</b></center> </p>
                </div>

            </div>
            <div class=""notification-ui_dd-footer"">
                <a href=""#!"" class=""btn btn-success btn-block"" style=""border-radius:0.9rem;padding:10px;width:100%; display:none;"" id=""view"" onclick=""View()"">View All</a>
            </div>
        </div>

    </li>
    <l");
            WriteLiteral(@"i class=""nav-item "" style=""display:none"" id=""nav-item-Profile"">
        <a class=""nav-link dropdown-toggle"" href=""#"" id=""navbarDropdownPro"" role=""button"" data-toggle=""dropdown"" aria-haspopup=""true"" aria-expanded=""false"">
            <i class=""fas fa-user-circle""></i>
        </a>
        <div class=""dropdown-menu dropdown-menu-right"" id=""dropdownContentProfile"" aria-labelledby=""navbarDropdownPro"">
        </div>
    </li>
</ul>
<script type=""text/javascript"">
    $(document).ready(function () {
        $.ajax({
            type: ""POST"",
            url: """);
#nullable restore
#line 47 "D:\SmartDust\Auth\TestingAndCalibrationLabs\TestingAndCalibrationLabs\TestingAndCalibrationLabs.Web.UI\Views\Shared\_pageNavigation.cshtml"
             Write(Url.Action("GetAllPagesWithNavigation","UiPageNavigation"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            success: function (response) {
                response.sort(function (a, b) {
                    if (a.orders < b.orders) { return 1; }
                    if (a.orders > b.orders) { return -1; }
                    return 0;
                });
                for (let i = 0; i < response.length; i++) {
                    var uiNavigationCategoryId = response[i].id;
                    var uiNavigationCategoryName = response[i].name;
                    var parentListDiv = ""#"" + uiNavigationCategoryName;
                    var parentListId = uiNavigationCategoryId;
                    var idNameExistOrNot = ""nav-item-"" + uiNavigationCategoryName;
                    var nameExistOrNot = document.getElementById(idNameExistOrNot);
                    if (!nameExistOrNot && response[i].childrens.length > 1) {
                        $('#navbarContentAdd').prepend(""</li>"");
                        $('#navbarContentAdd').prepend(""<li class='nav-item' id='"" + uiNavigationCategory");
            WriteLiteral(@"Name + ""'>"");
                        var buttonDropdown = ""<a class='nav-link dropdown-toggle' href='#' id='navbarDropdown"" + uiNavigationCategoryId + ""' role='button' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'>"" + uiNavigationCategoryName + ""</a>"";
                        $(parentListDiv).append(buttonDropdown);
                        $(parentListDiv).append(""<div class='dropdown-menu' id='dropdownContent"" + uiNavigationCategoryName + ""' aria-labelledby='navbarDropdown"" + uiNavigationCategoryId + ""'>"");
                        $(parentListDiv).append(""</div>"");
                    }
                    else if (nameExistOrNot) {
                        nameExistOrNot.style.display = ""block"";
                    }
                    var divExistOrNot = document.getElementById(parentListId);//Its not being used anywhere who to take
                    response[i].childrens.sort(function (a, b) {
                        if (a.name < b.name) { return -1; }
                  ");
            WriteLiteral(@"      if (a.name > b.name) { return 1; }
                        return 0;
                    });
                    for (let j = 0; j < response[i].childrens.length; j++) {
                        if (!nameExistOrNot && response[i].childrens.length == 1) {
                            var singlePageTypeUrl = response[i].childrens[j].formatedUrl;
                            var singleListParent = ""#navigationSingle"" + uiNavigationCategoryId;
                            $('#navbarContentAdd').prepend(""<li class='nav-item' id='navigationSingle"" + uiNavigationCategoryId + ""'></li>"");
                            var singleChild = ""<a class='nav-link text-dark' href='"" + singlePageTypeUrl + ""'>"" + uiNavigationCategoryName + ""</a>"";
                            $(singleListParent).append(singleChild);
                        }
                        else if (response[i].childrens.length > 1) {
                            var pageTypeUrl = response[i].childrens[j].formatedUrl;
                         ");
            WriteLiteral(@"   var pageTypeName = response[i].childrens[j].moduleName;
                            var uiNavigationId = response[i].id;
                            var dropdownContentId = ""#dropdownContent"" + uiNavigationCategoryName;
                            var pageTypeName = response[i].childrens[j].moduleName;
                            var nameexist = ""nav-item-"" + pageTypeName;
                            var nameid = document.getElementById(nameexist);
                            var script = ""<a class='dropdown-item' href='"" + pageTypeUrl + ""'>"" + pageTypeName + ""</a>"";
                            if (!nameid) {
                                $(dropdownContentId).append(script);
                            }
                            else {

                                nameid.style.display = ""block"";
                            }
                        }
                    }
                }
            },
            error: function (req, status, error) {
                console.");
            WriteLiteral(@"log(req);
                console.log(status);
                console.log(error);
            }
        });
    });
    //  FullPage script start
    var Page = 0;
    function toggleFullScreen(Screen) {
        var Element = document.getElementById('PageBody');
        var Size = window.matchMedia(""(min-width:0px)"");
        if (Screen == 1 && Size.matches) {
            Element.style = ""padding-right: 0px;padding-left: 0px;"";
            document.getElementById('nav-item-FullPage').innerHTML = ""Exit FullPage"";
        }
        else {
            var View = window.matchMedia(""(min-width: 600px)"")
            Page = 0;
            if (View.matches) {
                Element.style = ""padding-right:230px;padding-left: 230px;"";
            }
            document.getElementById('nav-item-FullPage').innerHTML = ""FullPage"";
        }
    }
</script>

");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
