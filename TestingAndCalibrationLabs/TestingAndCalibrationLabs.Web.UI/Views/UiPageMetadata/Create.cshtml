@model TestingAndCalibrationLabs.Web.UI.Models.UiPageMetadataDTO
@{
    ViewData["Title"] = "Create";
}
<!doctype html>
<html>
<body>
<h1>Ui Page Metadata</h1>
<h4>Create</h4>
<hr />
   
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" _lpchecked="1" class="mb-2" id="pageForm" method="post" asp-controller="UiPageMetadata" novalidate>
            <div asp-validation-summary="All"></div>
            <div class="row ms-1 me-1">
                <div class="col-lg-8  col-sm-12 col-xs-12 mt-3 form-element right-pd-input">
                    <label for="UiPageTypeId" class="form-label"></label>
                    <select class="form-input " name="UiPageTypeId" id="UiPageType" onchange="this.setAttribute('value',this.value)" asp-for="UiPageTypeId">
                        <option disabled="disabled" selected>Select Pages ...</option>
                        @foreach (var item in ViewBag.UiPageTypes)
                        {
                            <option value=@item.Id>@item.Name</option>
                        }
                    </select>
                </div>
                <input hidden value=@ViewBag.LookupList id="CC_id" />
                <div class="col-lg-8  col-sm-12 col-xs-12 mt-3 form-element right-pd-input">
                    <label for="UiControlTypeId" class="form-label"></label>
                    <select class="form-input " name="UiControlTypeId" id="UiControlType" onchange="this.setAttribute('value',this.value)" asp-for="UiControlTypeId">
                        <option disabled="disabled" selected>Select Control ...</option>
                        @foreach (var item in ViewBag.UiControlTypes)
                        {
                            <option value=@item.Id>@item.Name</option>
                        }
                    </select>
                </div>
                
                <div class="col-lg-8  col-sm-12 col-xs-12 mt-3 form-element right-pd-input">
                    <label for="Category" class="form-label"></label>
                    <select class="form-input " name="Category" id="catagory" onchange="category(this)" asp-for="Category">
                        <option disabled="disabled" selected>Select Category ...</option>
                        @foreach (var item in ViewBag.Lookups)
                        {
                            <option value=@item.Value>@item.Text</option>
                        }
                    </select>
                </div>
                    <div class ="col-lg-8  col-sm-12 col-xs-12 mt-3 form-element right-pd-input">
                        <input type="text" class="form-input " id="justAnInputBox" placeholder="Select Metadata Charactr.." autocomplete="off" />
                    </div>
                @* <div class="col-lg-8  col-sm-12 col-xs-12 mt-3 form-element right-pd-input">
                <select name="Category" class="form-input" onchange="category(this)" asp-items="@ViewBag.Lookups">
                </select>
                </div>*@
                <div class="col-lg-8  col-sm-12 col-xs-12 mt-3 form-element right-pd-input">
                    <label for="DataType" class="form-label"></label>
                    <select class="form-input" name="DataTypeId" id="DataType" onchange="this.setAttribute('value',this.value)" asp-for="DataTypeId">
                        <option disabled="disabled" selected>Select Data Type ...</option>
                        @foreach (var item in ViewBag.DataTypes)
                        {
                            <option value=@item.Id>@item.Name</option>
                        }
                    </select>
                </div>
                <div class="row ms-1 me-1">
                    <div class="col-lg-3 col-sm-12 col-xs-12 mt-3 form-element right-pd-frm-input">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="IsRequired" />
                            @Html.DisplayNameFor(model => model.IsRequired)
                        </label>
                    </div>
                </div>
                <div class="col-lg-8 col-sm-12 col-xs-12 mt-3 form-element right-pd-frm-input">
                    <input class="form-input width-full" type="text" id="UiControlDisplayName" name="UiControlDisplayName" placeholder=" " onchange="this.setAttribute('value',this.value)" asp-for="UiControlDisplayName">
                    <label class="form-label" for="UiControlDisplayName">UiControlDisplayName</label>
                </div>
                <div class="col-lg-8 col-sm-12 col-xs-12 mt-3 form-element right-pd-frm-input">
                    <input type="submit" value="Create" class="btn btn-lg btn-submit-print text-white" style=" background-color:#4250b5;" onclick="return DisplayProgressMessage(this, 'Saving...');" />
                </div>
            </div>
        </form>
    </div>
</div>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js">
        //const { Modal } = require("../../wwwroot/lib/bootstrap/dist/js/bootstrap");
    </script>
    
    <script src="~/js/comboTreePlugin.js" type="text/javascript"></script>

<script>
    function category(valll) {
        var status = valll.value;
        console.log(status);
        var selectedText = valll.options[catagory.selectedIndex].innerHTML;
        alert(selectedText);
        //var SampleJSONData = @ViewBag.LookupList;
       
        
    }
   
</script>
<script type="text/javascript">

    var SampleJSONData = @ViewBag.LookupList;
    var comboTree1, comboTree2, comboTree3;

    jQuery(document).ready(function ($) {

        comboTree1 = $('#justAnInputBox').comboTree({
            source: SampleJSONData,
            isMultiple: true,
            cascadeSelect: false,
            collapse: true,
            selectableLastNode: true

        });

       
    });


</script>
<script>
        function groupByKey(array, key) {
            return array
                .reduce((hash, obj) => {
                    if (obj[key] === undefined) return hash;
                    return Object.assign(hash, { [obj[key]]: (hash[obj[key]] || []).concat(obj) })
                }, {})
        }


        //var cars = [{ 'make': 'audi', 'model': 'r8', 'year': '2012' }, { 'make': 'audi', 'model': 'rs5', 'year': '2013' }, { 'make': 'ford', 'model': 'mustang', 'year': '2012' }, { 'make': 'ford', 'model': 'fusion', 'year': '2015' }, { 'make': 'kia', 'model': 'optima', 'year': '2012' }];
        //console.log(cars);
        var CC = document.getElementById("CC_id").value.toString();
        var myObject = eval('(' + CC + ')');
        //var list = @ViewBag.LookupList;
        var result = groupByKey(myObject, 'category');
       
        console.log(Object.keys(result).length);
        var arr = Object.entries(result);

        console.log(arr);
        console.log(myObject);
       //console.log(result);
       
        
</script>
<div>
    <a asp-action="Index">Back to List</a>
</div>
</body>
</html>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    }
