@model TestingAndCalibrationLabs.Web.UI.Models.RecordDTO
@{
    ViewData["Title"] = "Create";
}
<style>
    .fixed-bottom {
        position: relative;
    }
</style>
<div class="container-fluid">
    <div>
        <form id="commonForm" asp-controller="Common" asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ModuleId" />
            <input type="hidden" asp-for="UiPageTypeId" />
            <input type="hidden" asp-for="WorkflowStageId" value="true" />
            <input type="hidden" id="workflowStageChecker" value="false" />
            <div class="row ms-1 me-1">
                @foreach (var item in Model.Layout)
                {
                    @await Html.PartialAsync("~/Views/Common/Components/_control.cshtml", item)

                }
            </div>        
        </form>
        <div class="form-group" style="margin-left:2rem;">
            <button class="button-base ripple button-material-primary" id="createbtn" onclick="AjaxFormSubmit()" >Save</button>
        </div>
    </div>
</div>
    
@await Html.PartialAsync("_SavedSuccessfully")
@await Html.PartialAsync("_Errormessage")
<script>
    //This function will display the success snackbar
    function myFunction() {
        var x = document.getElementById("snackbarsuccess");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
    //This function will display the Failure snackbar
    function myFunctionError() {
        var x = document.getElementById("snackbarerror");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
</script>
<script type="text/javascript">
    var moduleId = parseInt($("#ModuleId").val())
        var uiPageTypeId = parseInt($("#UiPageTypeId").val())
        
    var mainModel = JSON.parse('@Json.Serialize(Model)');
    function AjaxFormSubmit() {
        WheelLoader();
        var workflowStageId = parseInt($("#WorkflowStageId").val())
        //createRipple(this);
        //Set the URL.
        var url = $("#commonForm").attr("action");
        
        //here I am flatting the hirarchy of Node<Layout> and List Of Layout
        const getMembers = (member) => {

            if (!member.children || !member.children.length) {
                return member.value.uiPageMetadata;
            }
            return [member.value.uiPageMetadata, _.flatMapDeep(member.children, getMembers)];
        }
        var uiPageMetaData = _.flatMapDeep(mainModel.layout, getMembers);
        //flatten process end
        var fieldValues = [];
        for (let i = 0; i < uiPageMetaData.length; i++) {
            if (uiPageMetaData[i].controlCategoryName == "DataControl" && uiPageMetaData[i].multiValueControl != true) {
                var fieldId = "#" + uiPageMetaData[i].uiControlTypeName + uiPageMetaData[i].id;
                if ($(fieldId).hasClass("red-error-border")) {
                    $(fieldId).removeClass("red-error-border").addClass("black-border");
                }
                var metadataId = uiPageMetaData[i].id;
                var fieldValue = $(fieldId).val();
                var keyValuepair = {};
                keyValuepair.UiPageMetadataId = metadataId;
                keyValuepair.UiPageTypeId = uiPageTypeId;
                keyValuepair.Value = fieldValue;
                fieldValues.push(keyValuepair)
            }
        }
       
        $.ajax({
            type: 'POST',
            url: url,
            data: {  moduleId, workflowStageId, uiPageTypeId, fieldValues },
            success: function (response) {
                myFunction();                      //Calling myFunction javascript function
                SuccessMessage(NotificationNumbers++, "Saved Successfully");
                HideWheelLoader();
                window.location.href = "/common/index/" + moduleId;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                HideWheelLoader();
                var newresponseJSON = response.responseJSON;                    //assiging the values of responseJson to  newresponseJSON
                var newErrorMessage = newresponseJSON.errorMessage;               //assiging the values of errorMessage to  newErrorMessage
                for (var i = 0; i < newErrorMessage.length; i++) {
                    var sourceId = "#" + newErrorMessage[i].sourceId;
                    $(sourceId).removeClass("black-border").addClass("red-error-border");
                    myFunctionError();                                              //Calling myFunctionError javacript function
                    ErrorMessage(NotificationNumbers++, newErrorMessage[i].reason);
                    if (i == 0) {
                        document.getElementById("errormessage").innerHTML = newErrorMessage[i].reason;
                    }
                }
            }
        });
    }
</script>
