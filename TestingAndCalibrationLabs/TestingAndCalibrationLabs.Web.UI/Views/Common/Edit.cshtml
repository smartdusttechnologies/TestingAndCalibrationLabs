@model TestingAndCalibrationLabs.Web.UI.Models.RecordDTO
@{
    ViewData["Title"] = "CreateLayout";
}
@*<style>
    .fixed-bottom {
        position: relative;
    }
</style>*@
<div class="container-fluid">
    <div>
        <form id="commonForm" asp-controller="Common" asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" id="Id" name="Id" />
            <input type="hidden" asp-for="ModuleId" />
            <input type="hidden" asp-for="UiPageTypeId" />
            <input type="hidden" asp-for="WorkflowStageId" />
            <input type="hidden" asp-for="UpdatedDate" />
            <div class="row ms-1 me-1">
                @foreach (var item in Model.Layout)
                {
                    @await Html.PartialAsync("~/Views/Common/Components/_control.cshtml", item)
                }
            </div>
        </form>
        <div class="form-group" style="margin:6px;" id="sub-mt-btn">
            <input type="button" id="createbtn" value="Save" class="button-base button-material-primary" onclick="AjaxFormSubmit()" />
        </div>
    </div>
</div>

<div>
    <div class="d-flex justify-content-center fixed-bottom">
        <div class="alert alert-success" role="alert" id="snackbarsuccess">
            <div class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation6 MuiAlert-root MuiAlert-filledSuccess MuiAlert-filled css-1lgz3mj" role="alert">
                <div class="MuiAlert-icon css-1l54tgj">
                    <svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1cw4hi4" focusable="false" aria-hidden="true" viewBox="0 0 24 24">
                        <path d="M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"></path>
                    </svg>
                </div><div class="MuiAlert-message css-1xsto0d">Saved successfully!</div>
            </div>
        </div>
    </div>
</div>
<div>
    <div class="d-flex justify-content-center fixed-bottom">
        <div role="alert" id="snackbarerror">
            <div class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation6 MuiAlert-root MuiAlert-filledError MuiAlert-filled css-1ufabz4" role="alert">
                <div class="MuiAlert-icon css-1l54tgj">
                    <svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1cw4hi4" focusable="false" viewBox="0 0 24 24">
                        <path d="M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path>
                    </svg>
                </div>
                <div class="MuiAlert-message css-1xsto0d" id="errormessage">!</div>
            </div>
        </div>
    </div>
</div>

<script>
    //This function will display the success snackbar
    function myFunction() {
        var x = document.getElementById("snackbarsuccess");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
    //This function will display the Failure snackbar
    function myFunctionError() {
        var x = document.getElementById("snackbarerror");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
</script>
<script type="text/javascript">
    var mainModel = JSON.parse('@Json.Serialize(Model)');
    var updatedDate = mainModel.updatedDate;
    var uiPageTypeId = parseInt($("#UiPageTypeId").val())
    var moduleId = parseInt($("#ModuleId").val())
    var id = parseInt($("#Id").val())
    var url = $("#commonForm").attr("action");
    AjaxFormSubmit = () => {
        WheelLoader();
        let workflowStageId = parseInt($("#WorkflowStageId").val())
        //here I am flatting the hirarchy of Node<Layout> To A List of Layout
        const getMembers = (member) => {
            if (!member.children || !member.children.length) {
                return member.value;
            }
            return [member.value, _.flatMapDeep(member.children, getMembers)];
        }
        var layout = _.flatMapDeep(mainModel.layout, getMembers);
        var fieldValues = [];
        for (let i = 0; i < layout.length; i++) {
            if (layout[i].uiPageMetadata.controlCategoryName == "DataControl" || layout[i].uiPageMetadata.multiValueControl == true) {
                var fieldId = "#" + layout[i].uiPageMetadata.uiControlTypeName + layout[i].uiPageMetadata.id;
                if ($(fieldId).hasClass("red-error-border")) {
                    $(fieldId).removeClass("red-error-border").addClass("black-border");
                }
                var metadataId = layout[i].uiPageMetadata.id;
                var fieldValue = $(fieldId).val();
                var keyValuepair = {};
                var uiPageData = layout[i].uiPageData;
                if (layout[i].uiPageData != null && layout[i].uiPageData.length != 0){
                       var pageDataId = layout[i].uiPageData[0].id;
                       var childIds = layout[i].uiPageData[0].childId;
                       var RecordIds = layout[i].uiPageData[0].recordId;
                       var oldValue = layout[i].uiPageData[0].value;
                       var List;
                    if (oldValue != fieldValue) {
                        if (layout[i].uiPageMetadata.multiValueControl == true) {
                            var filddata = $(fieldId).val();
                            List = filddata.split(",");
                            for (let x = 0; x < List.length; x++) {
                                var keyValuepair = {};
                                keyValuepair.Id = pageDataId;
                                if (x < uiPageData.length) {
                                keyValuepair.childId = findChildId(uiPageData, uiPageData[x].value); // Call the findChildId function
                               }
                                keyValuepair.uiPageMetadataId = metadataId;
                                keyValuepair.RecordId = id;
                                keyValuepair.Value = List[x];
                                keyValuepair.UiPageTypeId = uiPageTypeId;
                                fieldValues.push(keyValuepair)
                            }
                        }
                        function findChildId(uiPageData, value) {
                            var childId = uiPageData.find(item => item.value === value)?.childId;
                            return childId !== undefined ? childId : null;
                        }
                            if (layout[i].uiPageMetadata.multiValueControl != true) {
                                keyValuepair.Id = pageDataId;
                                keyValuepair.childId = childIds;
                                keyValuepair.uiPageMetadataId = metadataId;
                                keyValuepair.RecordId = id;
                                keyValuepair.Value = fieldValue;
                                keyValuepair.UiPageTypeId = uiPageTypeId;
                                fieldValues.push(keyValuepair)
                            }
                    }
                    
                  }
                else {
                    keyValuepair.Id = 0;
                    keyValuepair.uiPageMetadataId = metadataId;
                    keyValuepair.RecordId = id;
                    keyValuepair.Value = fieldValue;
                    keyValuepair.UiPageTypeId = uiPageTypeId;
                    fieldValues.push(keyValuepair)
                }
            }
        }
        $.ajax({
            type: 'POST',
            url: url,
            data: { id, workflowStageId, updatedDate, moduleId, uiPageTypeId, fieldValues},
            success: function (response) {
                myFunction();
                window.location.href = "/common/index/" + moduleId;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                HideWheelLoader();
                var newresponseJSON = response.responseJSON;                    //assiging the values of responseJson to  newresponseJSON
                var newErrorMessage = newresponseJSON.errorMessage;               //assiging the values of errorMessage to  newErrorMessage
                for (var i = 0; i < newErrorMessage.length; i++) {
                    var sourceId = "#" + newErrorMessage[i].sourceId;
                    $(sourceId).removeClass("black-border").addClass("red-error-border");
                    myFunctionError();                                              //Calling myFunctionError javacript function
                    ErrorMessage(NotificationNumbers++, newErrorMessage[i].reason);
                    if (i == 0) {
                        document.getElementById("errormessage").innerHTML = newErrorMessage[i].reason;
                    }

                }
            }
        });
    }
</script>