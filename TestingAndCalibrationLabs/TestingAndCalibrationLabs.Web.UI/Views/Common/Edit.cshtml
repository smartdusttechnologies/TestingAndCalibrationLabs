@model TestingAndCalibrationLabs.Web.UI.Models.RecordDTO
@{
    ViewData["Title"] = "CreateLayout";
}
<style>
    .fixed-bottom {
        position: relative;
    }
</style>
<div class="container-fluid">
    <div>
        <form id="commonForm" asp-controller="Common" asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" id="Id" name="Id" />
            <input type="hidden" asp-for="ModuleId" />
            <input type="hidden" asp-for="UiPageTypeId" />
            <input type="hidden" asp-for="WorkflowStageId" />
            <input type="hidden" asp-for="UpdatedDate" />
            <div class="row ms-1 me-1">
                @foreach (var item in Model.Layout)
                {
                    @await Html.PartialAsync("~/Views/Common/Components/_control.cshtml", item)
                }
            </div>
        </form>
        
    </div>
</div>
<div class="form-group" style="margin:6px;" id="sub-mt-btn">
    <input type="button" id="createbtn" value="Save" class="button-base button-material-primary" onclick="AjaxFormSubmit()" />
</div>

@await Html.PartialAsync("_SavedSuccessfully")
@await Html.PartialAsync("_Errormessage")

<script>
    //This function will display the success snackbar
    function myFunction() {
      
        var x = document.getElementById("snackbarsuccess");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
    //This function will display the Failure snackbar
    function myFunctionError() {
        var x = document.getElementById("snackbarerror");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
</script>
<script type="text/javascript">
    var mainModel = JSON.parse('@Json.Serialize(Model)');
    var updatedDate = mainModel.updatedDate;
    var uiPageTypeId = parseInt($("#UiPageTypeId").val())
    var moduleId = parseInt($("#ModuleId").val())
    var id = parseInt($("#Id").val())
    var url = $("#commonForm").attr("action");
    AjaxFormSubmit = () => {
        WheelLoader();
        let workflowStageId = parseInt($("#WorkflowStageId").val())
        //here I am flatting the hirarchy of Node<Layout> To A List of Layout
        const getMembers = (member) => {
            

            if (!member.children || !member.children.length) {
                return member.value;
            }
            return [member.value, _.flatMapDeep(member.children, getMembers)];
        }
        var layout = _.flatMapDeep(mainModel.layout, getMembers);
        var fieldValues = [];
        for (let i = 0; i < layout.length; i++) {
            
            if (layout[i].uiPageMetadata.controlCategoryName == "DataControl" && layout[i].uiPageMetadata.multiValueControl != true) {
                var fieldId = "#" + layout[i].uiPageMetadata.uiControlTypeName + layout[i].uiPageMetadata.id;
                if ($(fieldId).hasClass("red-error-border")) {
                    $(fieldId).removeClass("red-error-border").addClass("black-border");
                }
                var metadataId = layout[i].uiPageMetadata.id;
                var fieldValue = $(fieldId).val();
                var keyValuepair = {};
                var uiPageData = layout[i].uiPageData;
                if (layout[i].uiPageData != null) {
                    var pageDataId = layout[i].uiPageData.id;
                    var oldValue = layout[i].uiPageData.value;
                    if (oldValue != fieldValue) {
                        keyValuepair.Id = pageDataId;
                        keyValuepair.uiPageMetadataId = metadataId;
                        keyValuepair.RecordId = id;
                        keyValuepair.Value = fieldValue;
                        keyValuepair.UiPageTypeId = uiPageTypeId;
                        fieldValues.push(keyValuepair)
                    }
                }
                else {
                    keyValuepair.Id = 0;
                    keyValuepair.uiPageMetadataId = metadataId;
                    keyValuepair.RecordId = id;
                    keyValuepair.Value = fieldValue;
                        keyValuepair.UiPageTypeId = uiPageTypeId;
                    fieldValues.push(keyValuepair)
                }
            }
        }
        $.ajax({
            type: 'POST',
            url: url,
            data: { id, workflowStageId, updatedDate, moduleId, uiPageTypeId, fieldValues },
            success: function (response) {
                myFunction();
                window.location.href = "/common/edit/" + id;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
               HideWheelLoader();
                var newresponseJSON = response.responseJSON;                    //assiging the values of responseJson to  newresponseJSON
                var newErrorMessage = newresponseJSON.errorMessage;               //assiging the values of errorMessage to  newErrorMessage
                for (var i = 0; i < newErrorMessage.length; i++) {
                    var sourceId = "#" + newErrorMessage[i].sourceId;
                    $(sourceId).removeClass("black-border").addClass("red-error-border");
                    myFunctionError();                                              //Calling myFunctionError javacript function
                    ErrorMessage(NotificationNumbers++, newErrorMessage[i].reason);
                    if (i == 0) {
                        document.getElementById("errormessage").innerHTML = newErrorMessage[i].reason;
                    }

                }
            }
        });
    }
</script>
