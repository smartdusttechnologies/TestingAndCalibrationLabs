@model TestingAndCalibrationLabs.Web.UI.Models.RecordDTO
@{
    ViewData["Title"] = "CreateLayout";
}
<div class="container-fluid">
    <div>
        <form id="commonForm" asp-controller="Common" asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" id="Id" name="Id" />
            <input type="hidden" asp-for="ModuleId" />
            <input type="hidden" asp-for="UiPageTypeId" />
            @foreach (var item in Model.Layout)
            {
                <div> @await Html.PartialAsync("~/Views/Common/Components/_control.cshtml", item)</div>
            }
        </form>
        <input type="hidden" value="" name="lefid" id="lefid" />
        <div class="form-group">
            <input type="button" id="createbtn" value="Create" class="btn btn-primary mt-3" onclick="AjaxFormSubmit()" />
        </div>
    </div>
</div>
<div>
    <a asp-action="Index" asp-route-id="@Model.ModuleId">Back to List</a>
</div>
<div>
    <div class="d-flex justify-content-center fixed-bottom">
        <div class="alert alert-success" role="alert" id="snackbarsuccess">
            <div class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation6 MuiAlert-root MuiAlert-filledSuccess MuiAlert-filled css-1lgz3mj" role="alert">
                <div class="MuiAlert-icon css-1l54tgj">
                    <svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1cw4hi4" focusable="false" aria-hidden="true" viewBox="0 0 24 24">
                        <path d="M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"></path>
                    </svg>
                </div><div class="MuiAlert-message css-1xsto0d">Saved successfully!</div>
            </div>
        </div>
    </div>
</div>
@ViewBag.resultD
<div>
    <div class="d-flex justify-content-center fixed-bottom">
        <div role="alert" id="snackbarerror">
            <div class="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation6 MuiAlert-root MuiAlert-filledError MuiAlert-filled css-1ufabz4" role="alert">
                <div class="MuiAlert-icon css-1l54tgj">
                    <svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeInherit css-1cw4hi4" focusable="false" viewBox="0 0 24 24">
                        <path d="M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path>
                    </svg>
                </div>
                <div class="MuiAlert-message css-1xsto0d" id="errormessage">!</div>
            </div>
        </div>
    </div>
</div>
<script>
    //This function will display the success snackbar
    function myFunction() {
        var x = document.getElementById("snackbarsuccess");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
    //This function will display the Failure snackbar
    function myFunctionError() {
        var x = document.getElementById("snackbarerror");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
    }
</script>
<script type="text/javascript">

    function AjaxFormSubmit() {

        var moduleId = parseInt($("#ModuleId").val())
        var uiPageTypeId = parseInt($("#UiPageTypeId").val())
        var id = parseInt($("#Id").val())


        var x = document.getElementById("lefid").value;
        if (document.getElementById(x) != null && document.getElementById(x) != undefined) {
            document.getElementById(x).style.border = "1px solid black ";
        }
        var url = $("#commonForm").attr("action");
        var modelData = JSON.parse('@Json.Serialize(Model)');
        //here I am flatting the hirarchy of Node<Layout> and taking only uiPageMetadata
        const getMembers = (member) => {

            if (!member.children || !member.children.length) {
                return member.value.uiPageMetadata;
            }
            return [member.value.uiPageMetadata, _.flatMapDeep(member.children, getMembers)];
        }
        var uiPageMetaData = _.flatMapDeep(modelData.layout, getMembers);
        //flatten process end
        //
        //pageData flatten
        const getPageData = (ele) => {

            if (!ele.children || !ele.children.length) {
                return ele.value.uiPageData;
            }
            return [ele.value.uiPageData, _.flatMapDeep(ele.children, getMembers)];
        }
        var uiPageData = _.flatMapDeep(modelData.layout, getPageData);
        //flatten process end
        var fieldValues = [];
        for (let i = 0; i < uiPageMetaData.length; i++) {
            if (uiPageMetaData[i].controlCategoryName == "DataControl") {
                var fieldId = "#" + uiPageMetaData[i].uiControlTypeName + uiPageMetaData[i].id;
                var metadataId = uiPageMetaData[i].id;
                var fieldValue = $(fieldId).val();
                debugger;
                var pageDataId = getPageDataId(uiPageData, metadataId, fieldValue);
                //for (let x = 0; x < uiPageData.length; x++) {
                //    debugger;
                //    var pageDataId = uiPageData[x].id;
                //    var mId = uiPageData[x].uiPageMetadataId;
                //    var oldValue = uiPageData[x].value;
                //    if (metadataId == mId && fieldValue != oldValue ) {
                if (pageDataId != null) {

                    var keyValuepair = {};
                    keyValuepair.Id = pageDataId;
                    keyValuepair.UiPageMetadataId = metadataId;
                    keyValuepair.RecordId = id;
                    keyValuepair.Value = fieldValue;
                    fieldValues.push(keyValuepair)
                }
                //}
            }
        }

        function getPageDataId(model, mId, newValue) {
            debugger;
            for (var i = 0; i < uiPageData.length; i++) {
                if (model[i].uiPageMetadataId == mId && newValue != model[i].value) {
                    return model[i].id;
                } else if (model[i].uiPageMetadataId == mId && newValue == model[i].value) {
                    return null;
                }
            }
            return 0;
        }
        $.ajax({
            type: 'POST',
            url: url,
            data: { "Id": id, "ModuleId": moduleId, "UiPageTypeId": uiPageTypeId, "FieldValues": fieldValues },
            success: function (response) {
                myFunction();
                //window.location.href = "/common/index/" + moduleId;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                var newresponseJSON = response.responseJSON;                    //assiging the values of responseJson to  newresponseJSON
                var newErrorMessage = newresponseJSON.errorMessage;             //assiging the values of errorMessage to  newErrorMessage
                myFunctionError();                                              //Calling myFunctionError javacript function
                document.getElementById("errormessage").innerHTML = newErrorMessage.reason;
                //    var s = newErrorMessage.fid//Sending the reason to html
                document.getElementById(newErrorMessage.fid).style.border = "2px solid red";
                document.getElementById("lefid").value = newErrorMessage.sourceId;
            }
        });
    }
</script>
@*<script scr="https://cdn.jsdelivr.net/npm/lodash@4.17.10/lodash.min.js"></script>*@